;; Easier creation of functions with let
;;
;; [List(body), List(args), Call(name)] -> [List(code), List(name)]
;;
;; Usage:
;; '(fn {
;;   a b -
;; }) '(a b)
;; 'subtract-two-nums let-fn set
'(fn {
  'name set
  'args set
  'body set

  'args get len 'length set
  '() 'args-code set

  0 'i set
  '(fn i 1 + 'i set) 'inc-i set
  '(fn 'args get length i - 1 - nth) 'get-nth set

  '(
    get-nth
    args-code swap

    lazy insert 'args-code set
    args-code 'set insert 'args-code set

    inc-i
  ) '(i length <) while

  '() 'new-fn set

  '(fn
    ['new-fn get]
    ['body get list-shift]
    [swap 'body set]
    [insert 'new-fn set]) 'shift-body-into-new set

  ;; Pusn `fn scope_push` boilerplate if it exists
  '(shift-body-into-new) '(['body get 0 nth] [typeof "fn" =]) if
  '(shift-body-into-new) '(['body get 0] [nth typeof "scope_push" =]) if

  ['new-fn get] ['args-code get] [concat 'new-fn set]
  ['new-fn get] ['body get] [concat 'new-fn set]

  'new-fn get
  'name get
}) 'let-fn set