"std/stack.stack" import

;; Define a reverse function
'(
  ;; Duplicate the list before eating it with the len function
  dup
  len 'i set

  () 'new_list set

  ;; Define a function that decrements i
  '(i 1 - 'i set) decrement_i set

  '(
    ;; Decrement i
    decrement_i call

    ;; Dupe the list
    dup

    ;; Get the nth element (i)
    i nth

    ;; Push the new list to the stack
    new_list

    ;; Swap it with the nth element (list, nth)
    swap

    ;; Insert the nth element into the new list
    insert

    ;; Update the new list
    'new_list set
  ) '(i 0 !=) while

  ;; Clean up i and decrement_i
  'i unset
  'decrement_i unset

  ;; Remove the original list
  pop

  ;; Push the new list
  new_list

  ;; Clean up new_list
  'new_list unset
) 'list/reverse set

;; [Block, Integer] -> [Integer]
;; Runs a block n times
'(
    1 + swap
    (1 - dup 0 !=)
    while
    pop
) 'for set

;; <T>[List<T>, Block(T)] -> ()
'({
  ;; Set the block and list
  'block set
  'list set
  list len 'length set

  ;; Create a function to get the next item and call the block
  '(
    ;; Duplicate the last two items of the stack [list, length]
    dup2 call

    ;; Negate the length of the list
    -1 *

    ;; Get the nth item of the list
    nth

    ;; Call the block
    block call
  ) 'each set

  ;; Assemble our args
  list each length

  ;; Call the for loop
  for call

  ;; Pop the list from the stack (cleanup)
  pop
}) 'list/for_each set